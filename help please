#include <stdio.h>
#include <stdlib.h>

// custom library written by Harvard CS50
#include "bmp.h"

int main(int argc, char* argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        printf("Usage: ./n resize_factor infile outfile\n");
        return 1;
    }

    // get the resize factor
    int n = atoi(argv[1]);

    if (n < 1 || n > 100)
    {
        printf("n factor is too large. Enter an integer in range [1,100]\n");
        return 2;
    }

    // remember filenames
    char* infile = argv[2];
    char* outfile = argv[3];

    // open input file
    FILE* inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        printf("Could not open %s.\n", infile);
        return 3;
    }

    // open output file
    FILE* outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 4;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 5;
    }

    // the headers for the new file
    BITMAPFILEHEADER new_bf = bf;
    BITMAPINFOHEADER new_bi = bi;

    //determin new dimention for the image
    int oldWidth = bi.biWidth;
    int oldHeight = bi.biHeight;
    int newWidth = oldWidth * n;
    int newHeight = oldHeight * n;

    //determine padding for scanlines
    int inpadding = (4 - (oldWidth  * sizeof(RGBTRIPLE)) % 4) % 4;
    int outpadding = (4 - (newWidth * sizeof(RGBTRIPLE)) % 4) % 4;

    //regonfigur headers
    bi.biWidth = newWidth;
    bi.biHeight = newHeight;
    int newbiSizeImage = ((sizeof(RGBTRIPLE) * newWidth) + outpadding) * abs(newHeight); //determin new size of image
    int newbfSize = bf.bfSize - bi.biSizeImage + newbiSizeImage; //calculat new file size

    // write outfile's BITMAPFILEHEADER
    fwrite(&bf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&bi, sizeof(BITMAPINFOHEADER), 1, outptr);

    for (int i =0, biHeight = abs(bi.biHeight) * newWidth)
    {
    //sotr the line in arry to be writen to the out fil n times
    RGBTRIPLE *line = malloc(sizeof(RGBTRIPLE) + newWidth);

    //make sure malloc work
    if (line == NULL)
    {
        printf("Could not allocate memory (c: 97 returned NULL)\n"); //print on the screen masege for user

        return 6;
    }

    // iterate over infile's scanlines
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {
        // iterate over pixels in scanline
        for (int j = 0, m = 0; j < bi.biWidth; j++)
        {
            // temporary storage
            RGBTRIPLE triple;

            // read RGB triple from infile
            fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

            //copy that RGBTRIPLE into our outfile n times
            for (int x = 0; x < n; x++)
            {
                line [m++] = triple;
            }
        }

        //write resized line of pixle into out file with padding
        for (int y = 0; y < n; y++)
        {
            //write resized line
            fwrite(&line[0], (sizeof(RGBTRIPLE) * newWidth), 1, outptr);

            //add it back (to demonstrate how)
            for (int k = 0; k < outpadding; k++)
            {
                fputc(0x00, outptr);
            }
        }
        // skip over old padding, if any
        fseek(inptr, outpadding, SEEK_CUR);

        //free space used for our line
        free(line);

    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success

    return 0;
}

